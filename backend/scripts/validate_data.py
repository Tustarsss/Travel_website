"""Validate generated dataset against project constraints."""

from __future__ import annotations

import argparse
import json
from collections import Counter
from pathlib import Path

MIN_REGION_COUNT = 200
MIN_BUILDINGS_PER_REGION = 20
MIN_FACILITIES_TOTAL = 50
MIN_EDGE_COUNT = 200
MIN_USER_COUNT = 10


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Validate synthetic dataset")
    parser.add_argument(
        "--dataset",
        type=Path,
        default=Path("data/generated"),
        help="Directory containing JSON files generated by scripts/generate_data.py",
    )
    parser.add_argument(
        "--indexes",
        type=Path,
        default=Path("indexes"),
        help="Directory that should contain spatial/fulltext index files.",
    )
    return parser.parse_args()


def _load_json(path: Path) -> list[dict]:
    if not path.exists():
        raise FileNotFoundError(f"Missing dataset file: {path}")
    return json.loads(path.read_text(encoding="utf-8"))


def validate_dataset(dataset_dir: Path, indexes_dir: Path) -> None:
    regions = _load_json(dataset_dir / "regions.json")
    buildings = _load_json(dataset_dir / "buildings.json")
    facilities = _load_json(dataset_dir / "facilities.json")
    edges = _load_json(dataset_dir / "graph_edges.json")
    users = _load_json(dataset_dir / "users.json")

    if len(regions) < MIN_REGION_COUNT:
        raise AssertionError(f"Region count {len(regions)} < {MIN_REGION_COUNT}")

    buildings_by_region = Counter(b["region_id"] for b in buildings)
    lacking_regions = [rid for rid, count in buildings_by_region.items() if count < MIN_BUILDINGS_PER_REGION]
    if lacking_regions:
        raise AssertionError(
            "Regions with insufficient buildings: "
            + ", ".join(str(rid) for rid in lacking_regions[:10])
        )

    if len(facilities) < MIN_FACILITIES_TOTAL:
        raise AssertionError(f"Facility count {len(facilities)} < {MIN_FACILITIES_TOTAL}")

    if len(edges) < MIN_EDGE_COUNT:
        raise AssertionError(f"Edge count {len(edges)} < {MIN_EDGE_COUNT}")

    if len(users) < MIN_USER_COUNT:
        raise AssertionError(f"User count {len(users)} < {MIN_USER_COUNT}")

    indexes_dir.mkdir(parents=True, exist_ok=True)
    spatial = indexes_dir / "spatial.idx"
    fulltext = indexes_dir / "fulltext.idx"
    missing_indexes = [p.name for p in (spatial, fulltext) if not p.exists()]
    if missing_indexes:
        raise AssertionError("Missing index files: " + ", ".join(missing_indexes))

    print("[validate-data] Summary:")
    print(f"  Regions: {len(regions)}")
    print(f"  Buildings: {len(buildings)}")
    print(f"  Facilities: {len(facilities)}")
    print(f"  Graph edges: {len(edges)}")
    print(f"  Users: {len(users)}")
    print("[validate-data] Dataset validation passed!")


def main() -> None:
    args = parse_args()
    validate_dataset(args.dataset, args.indexes)


if __name__ == "__main__":
    main()
